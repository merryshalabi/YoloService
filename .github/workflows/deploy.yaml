name: YOLO Test and Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REPO_URL: ${{ github.server_url }}/${{ github.repository }}.git
  REPO_NAME: ${{ github.event.repository.name }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts

      - name: Ensure project and environment setup on EC2
        run: |
          ssh ${{ env.EC2_USERNAME }}@${{ env.EC2_HOST }} '
            set -e
            if [ -d "${REPO_NAME}/.git" ]; then
              echo "âœ… Repo exists. Pulling latest changes..."
              cd ${REPO_NAME}
              git reset --hard
              git clean -fd
              git pull
            else
              echo "ðŸ“¦ Cloning fresh repo into ${REPO_NAME}"
              git clone ${REPO_URL} ${REPO_NAME}
              cd ${REPO_NAME}
            fi

            echo "ðŸ§ª Setting up virtual environment..."
            if [ ! -d ".venv" ]; then
              python3 -m venv .venv
            fi

            source .venv/bin/activate
            pip install --upgrade pip

            if [ -f "requirements.txt" ]; then
              echo "ðŸ“¦ Installing requirements.txt..."
              pip install -r requirements.txt
            fi

            if [ -f "torch-requirements.txt" ]; then
              echo "ðŸ“¦ Installing torch-requirements.txt..."
              pip install -r torch-requirements.txt
            fi
          '

      - name: Run tests on EC2
        run: |
          ssh ${{ env.EC2_USERNAME }}@${{ env.EC2_HOST }} '
            cd ${REPO_NAME}
            source .venv/bin/activate
            python3 -m unittest discover -s tests -v
          '

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts

      - name: Deploy YOLO service on EC2
        run: |
          ssh ${{ env.EC2_USERNAME }}@${{ env.EC2_HOST }} '
            cd ${REPO_NAME}
            ./deploy.sh
          '