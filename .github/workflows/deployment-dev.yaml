name: Yolo Deploy Dev

on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string
    secrets:
      SSH_PRIVATE_KEY:
        required: true
      EC2_HOST_DEV:
        required: true
      S3_BUCKET_NAME_DEV:
        required: true
  workflow_dispatch:
    inputs:
      image:
        required: true
        type: string
        description: 'Docker image name to deploy'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download image name artifact (fallback)
        uses: actions/download-artifact@v4
        with:
          name: yolo-image-name
          path: ./
        continue-on-error: true

      - name: Setup SSH key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Determine image name
        id: get-image
        run: |
          # Try input first
          if [ -n "${{ inputs.image }}" ]; then
            IMAGE_NAME="${{ inputs.image }}"
            echo "‚úÖ Using input image: $IMAGE_NAME"
          # Fallback to artifact
          elif [ -f "image_name.txt" ]; then
            IMAGE_NAME=$(cat image_name.txt)
            echo "‚úÖ Using artifact image: $IMAGE_NAME"
          else
            echo "‚ùå No image name found!"
            exit 1
          fi
          
          echo "image=$IMAGE_NAME" >> "$GITHUB_OUTPUT"
          echo "üöÄ Final image name: $IMAGE_NAME"

      - name: Create .env file
        run: |
          IMAGE_NAME="${{ steps.get-image.outputs.image }}"
          
          echo "YOLO_IMG_NAME=$IMAGE_NAME" > .env
          echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME_DEV }}" >> .env
          
          echo "üìù Contents of .env file:"
          cat .env

      - name: SSH and deploy using Docker Compose
        run: |
          scp -i key.pem -o StrictHostKeyChecking=no .env ubuntu@${{ secrets.EC2_HOST_DEV }}:/home/ubuntu/YoloService/.env
          
          ssh -i key.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST_DEV }} << 'EOF'
            echo "üìÅ Cloning or updating repo"
            if [ -d "YoloService" ]; then
              cd YoloService
              git checkout dev
              git pull origin dev
            else
              git clone --branch dev https://github.com/${{ github.repository }} YoloService
              cd YoloService
            fi
            
            echo "üìù Checking .env file contents on server:"
            cat .env
            
            echo "[+] Checking for Docker"
            if ! command -v docker &> /dev/null; then
              echo "üì¶ Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sh get-docker.sh
              sudo usermod -aG docker $USER
              newgrp docker
            else
              echo "‚úÖ Docker already installed"
            fi
            
            echo "üõë Stopping existing systemd service if running"
            sudo systemctl stop yolo-detection.service 2>/dev/null || echo "Service not running"
            sudo systemctl disable yolo-detection.service 2>/dev/null || echo "Service not enabled"
            
            echo "üê≥ Running Docker Compose for Yolo Dev"
            docker compose -f docker-compose.yolo-dev.yaml pull
            docker compose -f docker-compose.yolo-dev.yaml up -d --remove-orphans
            
            echo "üîç Verifying Yolo service"
            sleep 10
            if curl -s http://localhost:8081/health 2>/dev/null; then
              echo "‚úÖ Yolo service is responding"
            else
              echo "‚ö†Ô∏è Yolo service may not be ready yet"
              docker logs $(docker ps -qf "name=yolo") 2>/dev/null || echo "No yolo container found"
            fi
          EOF